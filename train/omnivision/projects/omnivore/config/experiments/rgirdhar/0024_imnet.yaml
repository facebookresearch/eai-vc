# @package _global_

trainer:
  _target_: omnivore.trainer.omnivision_trainer.OmnivisionTrainer
  max_epochs: 300
  mode: train
  accelerator: cuda
  seed_value: 42
  val_epoch_freq: 1

  data:
    train:
      _target_: omnivore.data.torch_dataset.TorchDataset
      dataset:
        _target_: omnivore.data.path_dataset.ImagePathDataset
        path_file_list:
          - /checkpoint/imisra/datasets/in1k_disk/train_images_global.npy
          - manifold://omnivore/tree/datasets/imagenet_1k_meta/train_images_manifold_v2.npy
        label_file_list:
          - /checkpoint/imisra/datasets/in1k_disk/train_labels.npy
          - manifold://omnivore/tree/datasets/imagenet_1k_meta/train_labels.npy
        #name: imagenet1k_train
        transforms:
          - _target_: omnivore.data.transforms.transform_wrappers.VisionTransform
            base_transform:
              _target_: torchvision.transforms.Compose
              transforms:
                - _target_: torchvision.transforms.RandomResizedCrop
                  size: 224
                  interpolation: 3
                - _target_: torchvision.transforms.RandomHorizontalFlip
                - _target_: omnivore.data.transforms.rand_auto_aug.RandAugment  # Essentially autoagument rand-m9-mstd0.5-inc1
                  magnitude: 9
                  magnitude_std: 0.5
                  increasing_severity: True
                - _target_: torchvision.transforms.ColorJitter
                  brightness: 0.4
                  contrast: 0.4
                  saturation: 0.4
                  hue: 0.4
                - _target_: torchvision.transforms.ToTensor
                - _target_: torchvision.transforms.RandomErasing
                  p: .25
                - _target_: torchvision.transforms.Normalize
                  mean: [0.485, 0.456, 0.406]
                  std: [0.229, 0.224, 0.225]
      shuffle: True
      batch_size: 64
      num_workers: 10
      pin_memory: True
      drop_last: True
      collate_fn:
        _target_: omnivore.data.api.DefaultOmnivoreCollator
        output_key: in1k
        batch_transforms:
        - _target_: omnivore.data.transforms.cutmixup.CutMixUp
          mixup_alpha: 0.8 # mixup alpha value, mixup is active if > 0.
          cutmix_alpha: 1.0 # cutmix alpha value, cutmix is active if > 0.
          prob: 1.0 # probability of applying mixup or cutmix per batch or element
          switch_prob: 0.5 # probability of switching to cutmix instead of mixup when both are active
          mode: batch # how to apply mixup/cutmix params (per 'batch', 'pair' (pair of elements), 'elem' (element)
          correct_lam: True # apply lambda correction when cutmix bbox clipped by image borders
          label_smoothing: 0.1 # apply label smoothing to the mixed target tensor
          num_classes: 1000 # number of classes for target
      worker_init_fn: NULL
    val:
      _target_: omnivore.data.torch_dataset.TorchDataset
      dataset:
        _target_: omnivore.data.path_dataset.ImagePathDataset
        path_file_list:
          - /checkpoint/imisra/datasets/in1k_disk/val_images_global.npy
          - manifold://omnivore/tree/datasets/imagenet_1k_meta/val_images_manifold_v2.npy
        label_file_list:
          - /checkpoint/imisra/datasets/in1k_disk/val_labels.npy
          - manifold://omnivore/tree/datasets/imagenet_1k_meta/val_labels.npy
        #name: imagenet1k_val
        transforms:
          - _target_: omnivore.data.transforms.transform_wrappers.VisionTransform
            base_transform:
              _target_: torchvision.transforms.Compose
              transforms:
                - _target_: torchvision.transforms.Resize
                  size: 224
                  interpolation: 3
                - _target_: torchvision.transforms.CenterCrop
                  size: 224
                - _target_: torchvision.transforms.ToTensor
                - _target_: torchvision.transforms.Normalize
                  mean: [0.485, 0.456, 0.406]
                  std: [0.229, 0.224, 0.225]
      shuffle: False
      batch_size: 64
      num_workers: 8
      pin_memory: True
      drop_last: True
      collate_fn:
        _target_: omnivore.data.api.DefaultOmnivoreCollator
        output_key: in1k
      worker_init_fn: NULL

  model:
    _target_: omnivision.model.model_wrappers.MIMOHeadWrapper
    handle_list_inputs: True
    trunk:
      _target_: omnivore.models.vision_transformer.VisionTransformer
      img_size:
        - 3
        - 16
        - 224
        - 224
      embed_dim: 768
      depth: 12
      patch_size: [2, 16, 16]
      drop_path_rate: 0.1
      patch_embed_type: generic
      patch_embed_params_list:
      - _target_: omnivore.models.PadIm2Video
        pad_type: repeat
        ntimes: 2
      - _target_: omnivore.models.make_conv_or_linear
        layer:
          _target_: torch.nn.Conv3d
          in_channels: 3
          out_channels: ${....embed_dim}
          kernel_size: ${....patch_size}
          stride: ${.kernel_size}
        init_weight:
          _target_: omnivore.models.reshape_and_init_as_mlp
        _recursive_: False
      attn_target:
        _target_: omnivore.models.vision_transformer.Attention
        _partial_: True
        num_heads: 12
        proj_drop: 0
        qk_scale: NULL
        qkv_bias: True
        attn_drop: 0
    heads:
      - head:
          _target_: omnivision.model.model_init_utils.init_parameters
          model:
            _target_: torch.nn.Linear
            in_features: 768
            out_features: 1000
          init_fns:
            weight:
              _target_: timm.models.layers.trunc_normal_
              _partial_: True
              mean: 0
              std: 2e-5
            bias:
              _target_: torch.nn.init.zeros_
              _partial_: True
        fork_module: ""
        input_key: in1k
        output_key: in1k
    trunk_fields:
      - input_key: NULL
        args: ["vision"]
  optim:
    amp:
      enabled: True
      amp_dtype: float16  # bfloat16 or float16
    gradient_clip: NULL
    optimizer:
      _target_: torch.optim.AdamW
    # param_group_modifiers:
    #   - _target_: omnivore.optim.layer_decay_param_modifier.layer_decay_param_modifier
    #     _partial_: True
    #     layer_decay_value: 0.65
    options:
      lr:
        - scheduler:
            _target_: fvcore.common.param_scheduler.CompositeParamScheduler
            schedulers:
              - _target_: fvcore.common.param_scheduler.LinearParamScheduler
                start_value: 1e-6
                end_value: 5e-4
              - _target_: fvcore.common.param_scheduler.CosineParamScheduler
                start_value: ${..0.end_value}
                end_value: 1e-5
            lengths: [0.0166, 0.9834]  # warm for 5 epochs
            interval_scaling: ['rescaled', 'rescaled']
      weight_decay:
        - scheduler:
            _target_: fvcore.common.param_scheduler.ConstantParamScheduler
            value: 0.05
        - scheduler:
            _target_: fvcore.common.param_scheduler.ConstantParamScheduler
            value: 0.0
          param_names:
             - '*.bias'
             - '*.pos_embed'
             - '*.cls_token'
          module_cls_names: ['torch.nn.LayerNorm']
  metrics:
    train:
      in1k:
        accuracy_top1:
          _target_: omnivore.metrics.accuracy.Accuracy
          top_k: 1
        accuracy_top5:
          _target_: omnivore.metrics.accuracy.Accuracy
          top_k: 5
    val:
      in1k:
        accuracy_top1:
          _target_: omnivore.metrics.accuracy.Accuracy
          top_k: 1
        accuracy_top5:
          _target_: omnivore.metrics.accuracy.Accuracy
          top_k: 5
  loss:
    in1k:
      _target_: torch.nn.CrossEntropyLoss

  distributed:
    backend: nccl
    comms_dtype: float16
    find_unused_parameters: false

  logging:
    tensorboard_writer:
      _target_: omnivore.logger.make_tensorboard_logger
      log_dir:  ${launcher.experiment_log_dir}/tensorboard
      flush_secs: 120
    log_dir: ${launcher.experiment_log_dir}/logs
    log_freq: 10

  checkpoint:
    save_dir: ${launcher.experiment_log_dir}/checkpoints
    save_freq: 0 # 0 only last checkpoint is saved.
    model_weight_initializer: NULL

  cuda:
    # https://pytorch.org/docs/stable/backends.html
    allow_tf32: True
    cudnn_deterministic: False
    cudnn_benchmark: True

launcher:
  num_nodes: 1
  gpus_per_node: 8

hydra:
  output_subdir: NULL
  run:
    dir: .

submitit:
  name: imnet
  partition: learnlab
  timeout_hour: 72
  use_cluster: True
  cpus_per_task: 12
  port_range: [10000, 65000]
