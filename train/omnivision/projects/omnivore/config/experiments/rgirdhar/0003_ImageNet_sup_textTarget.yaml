# @package _global_

data_module:
  _target_: omnivision.data_module.base_data_module.BaseDataModule
  train:
    _target_: omnivore.data.torch_dataset.TorchDataset
    dataset:
      _target_: omnivore.data.path_dataset.PathDatasetWithTextLabels
      tokenizer:
        _target_: slip.tokenizer.SimpleTokenizer
        bpe_path_list:
          - /checkpoint/kalyanv/data/slip/bpe_simple_vocab_16e6.txt.gz
          - manifold://omnivore/tree/datasets/yfcc100m/meta_data/yfcc_meta_data/bpe_simple_vocab_16e6.txt.gz
      label_names_file_list:
        - /checkpoint/rgirdhar/Work/FB/2021/003_JointImVid/Datasets/ImageNet/label_names.npy
        - manifold://omnivore/tree/datasets/imagenet_1k_meta/label_names.npy
      templates:
        - "{}"
        # - "itap of a {}."
        # - "a bad photo of the {}."
        # - "a origami {}."
        # - "a photo of the large {}."
        # - "a {} in a video game."
        # - "art of the {}."
        # - "a photo of the small {}."
      base_dataset:
        _target_: omnivore.data.path_dataset.ImagePathDataset
        path_file_list:
          - /checkpoint/imisra/datasets/in1k_disk/train_images_global.npy
          - manifold://omnivore/tree/datasets/imagenet_1k_meta/train_images_manifold_v2.npy
        label_file_list:
          - /checkpoint/imisra/datasets/in1k_disk/train_labels.npy
          - manifold://omnivore/tree/datasets/imagenet_1k_meta/train_labels.npy
        transforms:
          - _target_: omnivore.data.transforms.transform_wrappers.VisionTransform
            base_transform:
              _target_: torchvision.transforms.Compose
              transforms:
                - _target_: torchvision.transforms.RandomResizedCrop
                  size: 224
                  interpolation: 3
                - _target_: torchvision.transforms.RandomHorizontalFlip
                - _target_: omnivore.data.transforms.rand_auto_aug.RandAugment  # Essentially autoagument rand-m9-mstd0.5-inc1
                  magnitude: 9
                  magnitude_std: 0.5
                  increasing_severity: True
                - _target_: torchvision.transforms.ColorJitter
                  brightness: 0.4
                  contrast: 0.4
                  saturation: 0.4
                  hue: 0.4
                - _target_: torchvision.transforms.ToTensor
                - _target_: torchvision.transforms.RandomErasing
                  p: .25
                - _target_: torchvision.transforms.Normalize
                  mean: [0.485, 0.456, 0.406]
                  std: [0.229, 0.224, 0.225]
    shuffle: True
    batch_size: 64
    num_workers: 10
    pin_memory: True
    drop_last: True
    collate_fn:
      _target_: omnivore.data.api.DefaultOmnivoreCollator
      output_key: in1k
      # TODO: Need to implement cutmix for vision-text
      # batch_transforms:
      # - _target_: omnivore.data.transforms.cutmixup.CutMixUp
      #   mixup_alpha: 0.8 # mixup alpha value, mixup is active if > 0.
      #   cutmix_alpha: 1.0 # cutmix alpha value, cutmix is active if > 0.
      #   prob: 1.0 # probability of applying mixup or cutmix per batch or element
      #   switch_prob: 0.5 # probability of switching to cutmix instead of mixup when both are active
      #   mode: batch # how to apply mixup/cutmix params (per 'batch', 'pair' (pair of elements), 'elem' (element)
      #   correct_lam: True # apply lambda correction when cutmix bbox clipped by image borders
      #   label_smoothing: 0.1 # apply label smoothing to the mixed target tensor
      #   num_classes: 1000 # number of classes for target
    worker_init_fn: NULL
  val:
    _target_: omnivore.data.torch_dataset.TorchDataset
    dataset:
      _target_: omnivore.data.path_dataset.PathDatasetWithTextLabels
      tokenizer: ${...train.dataset.tokenizer}
      label_names_file_list: ${...train.dataset.label_names_file_list}
      templates: ${...train.dataset.templates}
      base_dataset:
        _target_: omnivore.data.path_dataset.ImagePathDataset
        path_file_list:
          - /checkpoint/imisra/datasets/in1k_disk/val_images_global.npy
          - manifold://omnivore/tree/datasets/imagenet_1k_meta/val_images_manifold_v2.npy
        label_file_list:
          - /checkpoint/imisra/datasets/in1k_disk/val_labels.npy
          - manifold://omnivore/tree/datasets/imagenet_1k_meta/val_labels.npy
        transforms:
          - _target_: omnivore.data.transforms.transform_wrappers.VisionTransform
            base_transform:
              _target_: torchvision.transforms.Compose
              transforms:
                - _target_: torchvision.transforms.Resize
                  size: 224
                  interpolation: 3
                - _target_: torchvision.transforms.CenterCrop
                  size: 224
                - _target_: torchvision.transforms.ToTensor
                - _target_: torchvision.transforms.Normalize
                  mean: [0.485, 0.456, 0.406]
                  std: [0.229, 0.224, 0.225]
    shuffle: False
    batch_size: 64
    num_workers: 8
    pin_memory: True
    drop_last: False
    collate_fn:
      _target_: omnivore.data.api.DefaultOmnivoreCollator
      output_key: in1k
    worker_init_fn: NULL

lightning_module:
  _target_: omnivore.lightning_module.omnivore_lightning_module.OmnivoreLightningModule
  model:
    _target_: omnivision.model.model_wrappers.MultiModalZeroShotEvalWrapper
    vision_trunk:
      _target_: omnivision.model.model_wrappers.MIMOHeadWrapper
      trunk:
        _target_: omnivore.models.vision_transformer.VisionTransformer
        embed_dim: 384
        depth: 12
        attn_target:
          _target_: omnivore.models.vision_transformer.Attention
          _partial_: True
          num_heads: 12
          proj_drop: 0
          qk_scale: NULL
          qkv_bias: True
          attn_drop: 0
      heads:
        - fork_module: ""
          head:
            _target_: torch.nn.Linear
            in_features: ${.....trunk.embed_dim}
            out_features: 512
          input_key: in1k
          output_key: image_embed
      trunk_fields:
        - input_key: NULL
          args: ["vision"]
    text_trunk:
      _target_: omnivision.model.model_wrappers.MIMOHeadWrapper
      trunk:
        _target_: omnivore.models.slip_text_transformer.SLIPTextTransformer
        context_length: 77
        vocab_size: 49408
        transformer_width: 512
        transformer_heads: 8
        transformer_layers: 12
      heads:
        - fork_module: ""
          head:
            _target_: torch.nn.Linear
            in_features: ${.....trunk.transformer_width}
            out_features: 512
          input_key: in1k
          output_key: text_embed
      trunk_fields:
        - input_key: NULL
          args: ["text"]
    label_strings:
      in1k:
        _target_: omnivore.data.path_dataset.PathDatasetWithTextLabels.gen_label_strings
        tokenizer: ${data_module.train.dataset.tokenizer}
        label_names_file_list: ${data_module.train.dataset.label_names_file_list}
        templates: ${data_module.train.dataset.templates}
  optim:
    optimizer:
      _target_: torch.optim.AdamW
      # betas: [0.9, 0.95]
      # eps: 1e-8
    options:
      lr:
        - scheduler:
            _target_: fvcore.common.param_scheduler.CompositeParamScheduler
            schedulers:
              - _target_: fvcore.common.param_scheduler.LinearParamScheduler
                start_value: 1e-6
                end_value: 5e-4  # from https://github.com/facebookresearch/SLIP#clip-vit-base-with-8-nodes-batch-size-4096
              - _target_: fvcore.common.param_scheduler.CosineParamScheduler
                start_value: ${..0.end_value}
                end_value: 1e-6
            lengths: [0.0166, 0.9834]  # warm for 5 epochs
            interval_scaling: ['rescaled', 'rescaled']
      weight_decay:
        - scheduler:
            _target_: fvcore.common.param_scheduler.ConstantParamScheduler
            value: 0.05
        - scheduler:
            _target_: fvcore.common.param_scheduler.ConstantParamScheduler
            value: 0.0
          param_names:
            # - 'logit_scale'
            - '*bias*'
            - '*.pos_embed'
            - '*.cls_token'
            # - '*ln*'
            # - 'visual*norm*'
          module_cls_names: ['torch.nn.LayerNorm']
  meters:
    val:
      in1k:
        accuracy_top1:
          _target_: omnivision.meters.accuracy_meter.AccuracyMeter
          top_k: 1
        accuracy_top5:
          _target_: omnivision.meters.accuracy_meter.AccuracyMeter
          top_k: 5
  loss:
    in1k:
      _target_: omnivore.losses.contrastive_loss.ContrastiveLoss
      feat1_name: ${lightning_module.model.vision_trunk.heads.in1k.0.output_key}
      feat2_name: ${lightning_module.model.text_trunk.heads.in1k.0.output_key}

lightning_trainer:
  _target_: pytorch_lightning.Trainer
  num_nodes: ${launcher.num_nodes}
  gpus: ${launcher.gpus_per_node}
  sync_batchnorm: False
  replace_sampler_ddp: False
  max_epochs: 300
  accelerator: ${launcher.accelerator}
  strategy: ${launcher.strategy}

launcher:
  num_nodes: 8
  gpus_per_node: 8
  mode: train
  accelerator: gpu
  strategy: ddp

submitit:
  name: clip_base
  partition: learnlab
  time: "72:00:00"
  mem: "470GB"
  constraints: "volta32gb"
  use_cluster: True
  cpus_per_task: 10
