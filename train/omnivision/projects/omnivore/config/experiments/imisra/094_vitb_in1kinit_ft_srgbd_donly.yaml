# @package _global_

defaults:
  - /experiments/imisra/base_v0_amp.yaml
  - /experiments/imisra/base_dataset_paths.yaml
  - _self_

launcher:
  gpus_per_node: 8
  num_nodes: 2

constants:
  warmup_epochs: 5

trainer:
  max_epochs: 300

  data:
    train:
      _target_: omnivore.data.torch_dataset.TorchDataset
      dataset:
        _target_: omnivore.data.path_dataset.ImageWithDepthPathDataset
        concatenate_depth_and_rgb_channels: False
        copy_on_read: True
        path_file_list: ${constants.sun_train_path_file_list}
        label_file_list: ${constants.sun_train_label_file_list}
        depth_path_file_list: ${constants.sun_train_depth_path_file_list}
        new_prefix: ${constants.sun_rgb_prefix}
        new_depth_prefix: ${constants.sun_depth_prefix}
        transforms:
            - _target_: omnivore.data.transforms.image_rgbd_sample.VisionDepthConcatChannelTransform
              base_transform:
                _target_: torchvision.transforms.Compose
                transforms:
                  - _target_: omnivore.data.transforms.image_rgbd.DepthNorm
                    max_depth: NULL
                    compute_max_per_sample: True
                  - _target_: torchvision.transforms.RandomResizedCrop
                    size: 224
                    interpolation: 2
                  - _target_: torchvision.transforms.RandomHorizontalFlip
                  - _target_: omnivore.data.transforms.image_rgbd.RandAugment3d  # Essentially autoagument rand-m9-mstd0.5-inc1
                    num_ops: 2
                    magnitude: 9
                    interpolation: 2
                  - _target_: omnivore.data.transforms.image_rgbd.ColorJitter3d
                    brightness: 0.4
                    contrast: 0.4
                    saturation: 0.4
                    hue: 0.4
                  - _target_: torchvision.transforms.RandomErasing
                    p: .25
                  - _target_: torchvision.transforms.Normalize
                    mean: [0.485, 0.456, 0.406, 0.480]
                    std: [0.229, 0.224, 0.225, 0.165]
            - _target_: omnivore.data.transforms.image_rgbd_sample.VisionDepthConcatChannelToVisionDepth
      shuffle: True
      batch_size: 32
      num_workers: 12
      pin_memory: True
      drop_last: True
      collate_fn:
        _target_: omnivore.data.api.DefaultOmnivoreCollator
        output_key: sunrgbd
        batch_transforms:
        - _target_: omnivore.data.transforms.image_rgbd_sample.DropVision
          vision_drop_prob: 1.0
        # - _target_: omnivore.data.transforms.cutmixup.CutMixUp
        #   mixup_alpha: 0.8 # mixup alpha value, mixup is active if > 0.
        #   cutmix_alpha: 1.0 # cutmix alpha value, cutmix is active if > 0.
        #   prob: 1.0 # probability of applying mixup or cutmix per batch or element
        #   switch_prob: 0.5 # probability of switching to cutmix instead of mixup when both are active
        #   mode: batch # how to apply mixup/cutmix params (per 'batch', 'pair' (pair of elements), 'elem' (element)
        #   correct_lam: True # apply lambda correction when cutmix bbox clipped by image borders
        #   label_smoothing: 0.1 # apply label smoothing to the mixed target tensor
        #   num_classes: ${constants.sun_num_classes} # number of classes for target
      worker_init_fn: NULL
    val:
      _target_: omnivore.data.torch_dataset.TorchDataset
      dataset:
        _target_: omnivore.data.path_dataset.ImageWithDepthPathDataset
        concatenate_depth_and_rgb_channels: False
        copy_on_read: True
        path_file_list: ${constants.sun_test_path_file_list}
        label_file_list: ${constants.sun_test_label_file_list}
        depth_path_file_list: ${constants.sun_test_depth_path_file_list}
        new_prefix: ${constants.sun_rgb_prefix}
        new_depth_prefix: ${constants.sun_depth_prefix}
        transforms:
          - _target_: omnivore.data.transforms.image_rgbd_sample.VisionDepthConcatChannelTransform
            base_transform:
              _target_: torchvision.transforms.Compose
              transforms:
                - _target_: omnivore.data.transforms.image_rgbd.DepthNorm
                  max_depth: NULL
                  compute_max_per_sample: True
                - _target_: torchvision.transforms.Resize
                  size: 224
                  interpolation: 3
                - _target_: torchvision.transforms.CenterCrop
                  size: 224
                - _target_: torchvision.transforms.Normalize
                  mean: [0.485, 0.456, 0.406, 0.480]
                  std: [0.229, 0.224, 0.225, 0.165]
          - _target_: omnivore.data.transforms.image_rgbd_sample.VisionDepthConcatChannelToVisionDepth
      shuffle: False
      batch_size: 64
      num_workers: 12
      pin_memory: False
      drop_last: True
      collate_fn:
        _target_: omnivore.data.api.DefaultOmnivoreCollator
        output_key: sunrgbd
        batch_transforms:
        - _target_: omnivore.data.transforms.image_rgbd_sample.DropVision
          vision_drop_prob: 1.0
  model:
    _target_: omnivore.models.multimodal_wrapper.MultimodalWrapper
    postprocessors: NULL
    head_to_postprocessor: NULL
    modality_preprocessors:
      - name: "rgbdt_preprocessor"
        preprocessor:
          _target_: omnivore.models.multimodal_preprocessors.RGBDTPreprocessor
          img_size:
          - 1 # only depth channels
          - 224
          - 224
          num_cls_tokens: 1
          pos_embed_fn:
            _target_: omnivore.models.multimodal_preprocessors.SpatioTemporalPosEmbeddingHelper
            _partial_: true
            learnable: true
          depth_stem:
            _target_: omnivore.models.multimodal_preprocessors.PatchEmbedGeneric
            proj_stem:
            - _target_: torch.nn.Conv2d
              kernel_size: 16
              in_channels: 1
              out_channels: ${trainer.model.trunks.0.trunk.embed_dim}
              stride: ${.kernel_size}
              bias: False
            norm_layer:
              _target_: torch.nn.Identity
          rgbt_stem: NULL
    sample_to_modality_preprocessor:
      - sample_type: ${get_class:omnivore.data.api.BatchDepthSample}
        sample_field_to_modality:
        - input_fields: ["depth"]
          preprocessor_name: rgbdt_preprocessor
          output_key: "depth_tokens"
          output_key_for_dict: False
    tokens_to_trunks:
        - trunk_name: vision
          input_keys:
            - depth_tokens
    trunks:
      - name: vision
        trunk:
          _target_: omnivore.models.simple_transformer.SimpleTransformer
          embed_dim: 768
          num_blocks: 12
          ffn_dropout_rate: 0.0
          drop_path_rate: 0.1
          weight_init_style: pytorch
          attn_target:
            _target_: omnivore.models.simple_transformer.ViTAttention
            _partial_: True
            num_heads: 12
            dim: ${..embed_dim}
            proj_drop: 0
            qk_scale: NULL
            qkv_bias: True
            attn_drop: 0
          pre_transformer_layer:
            _target_: torch.nn.Identity
          post_transformer_layer:
            _target_: torch.nn.Sequential
            _args_:
            - _target_: torch.nn.LayerNorm # called self.norm in VisionTransformer
              normalized_shape: ${trainer.model.trunks.0.trunk.embed_dim}
    heads:
      - head:
          _target_: torch.nn.Sequential
          _args_:
          - _target_: omnivore.models.pooling_helpers.SelectElement
            index: 0 # select CLS token
          - _target_: torch.nn.Linear
            in_features: ${trainer.model.trunks.0.trunk.embed_dim}
            out_features: ${constants.sun_num_classes} # num classes
        fork_module: ""
        preprocessed_input_key: "depth_tokens"
        output_key: "depth_embed"
  optim:
    gradient_clip: NULL
    optimizer:
      _target_: torch.optim.AdamW
    options:
      lr:
        - scheduler:
            _target_: fvcore.common.param_scheduler.CompositeParamScheduler
            schedulers:
              - _target_: fvcore.common.param_scheduler.LinearParamScheduler
                start_value: 1e-6
                end_value: 1e-3
              - _target_: fvcore.common.param_scheduler.CosineParamScheduler
                start_value: ${..0.end_value}
                end_value: 1e-5
            lengths:
              - ${divide:${constants.warmup_epochs},${trainer.max_epochs}}
              - ${subtract:1,${divide:${constants.warmup_epochs},${trainer.max_epochs}}}
            interval_scaling: ['rescaled', 'rescaled']
      weight_decay:
        - scheduler:
            _target_: fvcore.common.param_scheduler.ConstantParamScheduler
            value: 1e-6
        - scheduler:
            _target_: fvcore.common.param_scheduler.ConstantParamScheduler
            value: 0.0
          param_names:
             - '*.bias'
             - '*.pos_embed'
             - '*.cls_token'
          module_cls_names: ['torch.nn.LayerNorm']
  meters:
    train:
      sunrgbd:
        accuracy_top1:
          _target_: omnivore.meters.DictApplyMeterWrapper
          base_meter:
            _target_: omnivision.meters.accuracy_meter.AccuracyMeter
            top_k: 1
          key: "depth_embed"
        accuracy_top5:
          _target_: omnivore.meters.DictApplyMeterWrapper
          base_meter:
            _target_: omnivision.meters.accuracy_meter.AccuracyMeter
            top_k: 5
          key: "depth_embed"
    val:
      sunrgbd: ${trainer.meters.train.sunrgbd}
  loss:
    sunrgbd:
      _target_: omnivore.losses.dict_apply_loss.DictApplyLoss
      loss_fn:
        _target_: torch.nn.CrossEntropyLoss
      key: "depth_embed"
  checkpoint:
    model_weight_initializer:
      _partial_: True
      _target_: omnivision.model.checkpoint_utils.load_state_dict_into_model
      strict: False # heads aren't loaded
      state_dict:
        _target_: omnivision.model.checkpoint_utils.load_checkpoint_and_apply_kernels
        # _target_: omnivision.model.checkpoint_utils.load_checkpoint
        checkpoint_path: /fsx-omnivore/imisra/omnivision_omnivore/config/experiments/imisra/036_vitb_in1k_repro_vitattn_init_norep.yaml/0/checkpoints/checkpoint.pt
        ckpt_state_dict_keys:
          - model
        checkpoint_kernels:
        - _target_: omnivision.model.checkpoint_utils.CkptExcludeKernel
          key_pattern:
            - "*heads*"
        - _target_: omnivision.model.checkpoint_utils.CkptProcessKernel
          key_pattern:
            - modality_preprocessors.rgbdt_preprocessor.rgbt_stem.proj.weight
          processor:
            _target_: torch.mean
            _partial_: True
            keepdims: True
            dim: 1
        - _target_: omnivision.model.checkpoint_utils.CkptRenameKeysKernel
          source_pattern: modality_preprocessors.rgbdt_preprocessor.rgbt_stem
          target_pattern: modality_preprocessors.rgbdt_preprocessor.depth_stem
