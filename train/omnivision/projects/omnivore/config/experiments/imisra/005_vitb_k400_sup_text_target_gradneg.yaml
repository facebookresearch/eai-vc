# @package _global_

data_module:
  _target_: omnivision.data_module.base_data_module.BaseDataModule
  train:
    _target_: omnivore.data.torch_dataset.TorchDataset
    dataset:
      _target_: omnivore.data.path_dataset.PathDatasetWithTextLabels
      tokenizer:
        _target_: slip.tokenizer.SimpleTokenizer
        bpe_path_list:
          - /checkpoint/kalyanv/data/slip/bpe_simple_vocab_16e6.txt.gz
          - manifold://omnivore/tree/datasets/yfcc100m/meta_data/yfcc_meta_data/bpe_simple_vocab_16e6.txt.gz
      label_names_file_list:
        - manifold://omnivore/tree/datasets/kinetics_400_meta/label_names.npy
      templates:
        - "{}"
      base_dataset:
        _target_: omnivore.data.path_dataset.VideoPathDataset
        path_file_list:
          - manifold://omnivore/tree/datasets/kinetics_400_meta/vidpaths_train.npy
        label_file_list:
          - manifold://omnivore/tree/datasets/kinetics_400_meta/labels_train.npy
        clip_sampler:
          _target_: pytorchvideo.data.clip_sampling.RandomClipSampler
          clip_duration: 2
        frame_sampler:
          _target_: pytorchvideo.transforms.UniformTemporalSubsample
          num_samples: 16
        decoder: pyav
        normalize_to_0_1: True
        transforms:
          - _target_: omnivore.data.transforms.transform_wrappers.VisionTransform
            base_transform:
              _target_: torchvision.transforms.Compose
              transforms:
              - _target_: pytorchvideo.transforms.ShortSideScale
                size: 256
              - _target_: torchvision.transforms.RandomResizedCrop
                size: 224
              - _target_: torchvision.transforms.RandomHorizontalFlip
                p: 0.5
              - _target_: torchvision.transforms._transforms_video.NormalizeVideo
                mean: [0.485, 0.456, 0.406]
                std: [0.229, 0.224, 0.225]
    shuffle: True
    batch_size: 4
    num_workers: 3
    pin_memory: True
    drop_last: True
    collate_fn:
      _target_: omnivore.data.api.DefaultOmnivoreCollator
      output_key: k400
    worker_init_fn: NULL
  val:
    _target_: omnivore.data.torch_dataset.TorchDataset
    dataset:
      _target_: omnivore.data.path_dataset.PathDatasetWithTextLabels
      tokenizer: ${...train.dataset.tokenizer}
      label_names_file_list: ${...train.dataset.label_names_file_list}
      templates: ${...train.dataset.templates}
      base_dataset:
        _target_: omnivore.data.path_dataset.VideoPathDataset
        path_file_list:
          - manifold://omnivore/tree/datasets/kinetics_400_meta/vidpaths_val.npy
        label_file_list:
          - manifold://omnivore/tree/datasets/kinetics_400_meta/labels_val.npy
        clip_sampler:
          _target_: pytorchvideo.data.clip_sampling.ConstantClipsPerVideoSampler
          clip_duration: 2 # 10
          clips_per_video: 1
        frame_sampler:
          _target_: pytorchvideo.transforms.UniformTemporalSubsample
          num_samples: 16 # 80
        decoder: pyav
        normalize_to_0_1: True
        transforms:
          - _target_: omnivore.data.transforms.transform_wrappers.VisionTransform
            base_transform:
              _target_: torchvision.transforms.Compose
              transforms:
              - _target_: pytorchvideo.transforms.ShortSideScale
                size: 224
              - _target_: torchvision.transforms.CenterCrop
                size: 224
              - _target_: torchvision.transforms._transforms_video.NormalizeVideo
                mean: [0.485, 0.456, 0.406]
                std: [0.229, 0.224, 0.225]
              # - _target_: omnivore.data.transforms.pytorchvideo.TemporalCrop
              #   frames_per_clip: 32
              #   stride: 40
              # - _target_: omnivore.data.transforms.pytorchvideo.SpatialCrop
              #   crop_size: 224
              #   num_crops: 3
    shuffle: False
    batch_size: 4
    num_workers: 3
    pin_memory: True
    drop_last: False
    collate_fn:
      _target_: omnivore.data.api.DefaultOmnivoreCollator
      output_key: k400
    worker_init_fn: NULL

lightning_module:
  _target_: omnivore.lightning_module.omnivore_lightning_module.OmnivoreLightningModule
  model:
    _target_: omnivision.model.model_wrappers.MultiModalZeroShotEvalWrapper
    vision_trunk:
      _target_: omnivision.model.model_wrappers.MIMOHeadWrapper
      trunk:
        _target_: omnivore.models.vision_transformer.VisionTransformer
        embed_dim: 768
        img_size:
          - 3
          - 16
          - 224
          - 224
        patch_size:
          - 2
          - 16
          - 16
        patch_embed_type: generic
        patch_embed_params_list:
          - _target_: torch.nn.Conv3d
            in_channels: 3
            out_channels: ${...embed_dim}
            kernel_size: ${...patch_size}
            stride:  ${...patch_size}
        depth: 12
        attn_target:
          _target_: omnivore.models.vision_transformer.Attention
          _partial_: True
          num_heads: 12
          proj_drop: 0
          qk_scale: NULL
          qkv_bias: True
          attn_drop: 0
      heads:
        - fork_module: ""
          head:
            _target_: torch.nn.Linear
            in_features: ${.....trunk.embed_dim}
            out_features: 512
          input_key: k400
          output_key: image_embed
      trunk_fields:
        - input_key: NULL
          args: ["vision"]
    text_trunk:
      _target_: omnivision.model.model_wrappers.MIMOHeadWrapper
      trunk:
        _target_: omnivore.models.slip_text_transformer.SLIPTextTransformer
        context_length: 77
        vocab_size: 49408
        transformer_width: 512
        transformer_heads: 8
        transformer_layers: 12
      heads:
        - fork_module: ""
          head:
            _target_: torch.nn.Linear
            in_features: ${.....trunk.transformer_width}
            out_features: 512
          input_key: k400
          output_key: text_embed
      trunk_fields:
        - input_key: NULL
          args: ["text"]
    label_strings:
      k400:
        _target_: omnivore.data.path_dataset.PathDatasetWithTextLabels.gen_label_strings
        tokenizer: ${data_module.train.dataset.tokenizer}
        label_names_file_list: ${data_module.train.dataset.label_names_file_list}
        templates: ${data_module.train.dataset.templates}
  optim:
    optimizer:
      _target_: torch.optim.AdamW
      # betas: [0.9, 0.95]
      # eps: 1e-8
    options:
      lr:
        - scheduler:
            _target_: fvcore.common.param_scheduler.CompositeParamScheduler
            schedulers:
              - _target_: fvcore.common.param_scheduler.LinearParamScheduler
                start_value: 1e-6
                end_value: 1.25e-4  # 5e-4 for 4K; 2x this LR for 512
              - _target_: fvcore.common.param_scheduler.CosineParamScheduler
                start_value: ${..0.end_value}
                end_value: 1e-6
            lengths: [0.0166, 0.9834]  # warm for 5 epochs
            interval_scaling: ['rescaled', 'rescaled']
      weight_decay:
        - scheduler:
            _target_: fvcore.common.param_scheduler.ConstantParamScheduler
            value: 0.05
        - scheduler:
            _target_: fvcore.common.param_scheduler.ConstantParamScheduler
            value: 0.0
          param_names:
            # - 'logit_scale'
            - '*bias*'
            - '*.pos_embed'
            - '*.cls_token'
            # - '*ln*'
            # - 'visual*norm*'
          module_cls_names: ['torch.nn.LayerNorm']
  meters:
    val:
      k400:
        accuracy_top1:
          _target_: omnivision.meters.accuracy_meter.AccuracyMeter
          top_k: 1
        accuracy_top5:
          _target_: omnivision.meters.accuracy_meter.AccuracyMeter
          top_k: 5
  loss:
    k400:
      _target_: omnivore.losses.contrastive_loss.ContrastiveLoss
      feat1_name: ${lightning_module.model.vision_trunk.heads.k400.0.output_key}
      feat2_name: ${lightning_module.model.text_trunk.heads.k400.0.output_key}

lightning_trainer:
  _target_: pytorch_lightning.Trainer
  num_nodes: ${launcher.num_nodes}
  gpus: ${launcher.gpus_per_node}
  sync_batchnorm: False
  replace_sampler_ddp: False
  max_epochs: 300
  accelerator: ${launcher.accelerator}
  strategy: ${launcher.strategy}

launcher:
  num_nodes: 16
  gpus_per_node: 8
  mode: train
  accelerator: gpu
  strategy: ddp

submitit:
  name: clip_base
  partition: learnlab
  time: "72:00:00"
  mem: "470GB"
  constraints: "volta32gb"
  use_cluster: True
  cpus_per_task: 10
