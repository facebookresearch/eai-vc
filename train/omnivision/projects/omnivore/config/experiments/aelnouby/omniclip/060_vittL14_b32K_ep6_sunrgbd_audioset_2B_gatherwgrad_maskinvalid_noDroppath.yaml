# @package _global_

defaults:
  - /experiments/imisra/0140_eval_zs_in1k_sunrgb_sund_nyurgb_nyud_places_food_pets_audioset_vgg_esc_audiocaps_k400_clotho

constants:
  rgb_crop_size: 224
  audio_num_mel_bins: 128
  video_clip_duration: 2
  audio_target_len: ${int:${times:${constants.video_clip_duration},102.4}}
  video_num_frames: ${constants.video_clip_duration}
  head_final_embed_dim: 512
  vision_pos_embed_learnable: True
  learnable_pos_audio: true
  depth_pos_embed_learnable: True
  kernel_size: 14
  rgb_kernel_size:
    - 2
    - ${constants.kernel_size}
    - ${constants.kernel_size}
  batch_size: 448
  freq_mask_param: 12
  mask_with_data_valid: True
  audio_loss_wt: 5.0
  warmup_epochs: 0.4 # 1ep over 20M

  ## Dataset specific paths
  sun_rgb_prefix: /fsx-omnivore/imisra/datasets/sunrgbd/images/
  sun_depth_prefix: /fsx-omnivore/imisra/datasets/sunrgbd/images_disparity/
  sun_zs_classnames_list:
    - /fsx-omnivore/imisra/datasets/sunrgbd/label_files/classnames_zs.npy
    - /checkpoint/imisra/datasets/sunrgbd/label_files/classnames_zs.npy
  bpe_path_list:
    - /checkpoint/rgirdhar/Work/FB/2021/003_JointImVid/Pretrained/bpe_simple_vocab_16e6.txt.gz
    - /checkpoint/imisra/datasets/SLIP/bpe_simple_vocab_16e6.txt.gz
    - manifold://omnivore/tree/datasets/yfcc100m/meta_data/yfcc_meta_data/bpe_simple_vocab_16e6.txt.gz
  in1k_zs_templates_list:
    - /checkpoint/imisra/datasets/in1k_disk/templates_openai.npy
    - manifold://omnivore/tree/datasets/imagenet_1k_meta/templates_openai.npy
  in1k_zs_classnames_list:
    - /checkpoint/imisra/datasets/in1k_disk/classnames_zs.npy
    - manifold://omnivore/tree/datasets/imagenet_1k_meta/classnames_zs.npy


trainer:
  _target_: omnivore.trainer.omnivision_trainer.OmnivisionTrainer
  max_epochs: 16 # 800M samples
  mode: train
  accelerator: cuda
  seed_value: 123
  val_epoch_freq: 1

  data:
    train:
      _target_: omnivore.data.concat_dataset.ConcatDataset
      max_steps: sum
      repeat_factors: [1.0, 125.0, 2.5]
      datasets:
      - _target_: omnivore.data.torch_dataset.TorchDataset
        dataset:
          _target_: omnivore.data.vision_text_dataset.VisionTextDataset
          base_dataset:
            _target_: omnivore.data.webdataset_helpers.WebVisionTextPipeline
            base_dataset_length: 50e6
            base_dataset_fn:
              _target_: omnivore.data.webdataset_helpers.get_wds_dataset
              _partial_: True
              resampled: True # needed for multi-node training
              urls:
                _target_: omnivore.utils.data.FileLoader.load
                return_idx: False
                path_list:
                  - /checkpoint/imisra/datasets/laion/laion2b-en_tarlist.pkl
          transforms:
            - _target_: omnivore.data.transforms.transform_wrappers.VisionTransform
              base_transform:
                _target_: torchvision.transforms.Compose
                transforms:
                  - _target_: torchvision.transforms.RandomResizedCrop
                    size: 224
                    interpolation: 3
                    scale: [0.9, 1.0]
                  - _target_: torchvision.transforms.ToTensor
                  - _target_: torchvision.transforms.Normalize
                    mean: [0.485, 0.456, 0.406]
                    std: [0.229, 0.224, 0.225]
            - _target_: omnivore.data.transforms.transform_wrappers.TextTransform
              base_transform:
                _target_: slip.tokenizer.SimpleTokenizer
                bpe_path_list:
                  - /checkpoint/imisra/datasets/SLIP/bpe_simple_vocab_16e6.txt.gz
                  - manifold://omnivore/tree/datasets/yfcc100m/meta_data/yfcc_meta_data/bpe_simple_vocab_16e6.txt.gz
        shuffle: True
        batch_size: ${constants.batch_size}
        num_workers: 12
        pin_memory: True
        drop_last: True
        collate_fn:
          _target_: omnivore.data.api.DefaultOmnivoreCollator
          output_key: laion
          batch_kwargs:
            model_fwd_kwargs:
              use_checkpoint: True
        worker_init_fn: NULL
      - _target_: omnivore.data.torch_dataset.TorchDataset
        dataset:
          _target_: omnivore.data.path_dataset.ImageWithDepthPathDataset
          concatenate_depth_and_rgb_channels: False
          path_file_list:
            - /fsx-omnivore/imisra/datasets/sunrgbd/label_files/train_image_names.npy # AWS
            - /checkpoint/kalyanv/data/sunrgbd/train_image_names.npy
            - manifold://omnivore/tree/datasets/sunrgbd/scene_challenge/train_image_names.npy
          label_file_list:
            - /fsx-omnivore/imisra/datasets/sunrgbd/label_files/train_labels.npy # AWS
            - /checkpoint/kalyanv/data/sunrgbd/train_labels.npy
            - manifold://omnivore/tree/datasets/sunrgbd/scene_challenge/train_labels.npy
          depth_path_file_list:
            - /fsx-omnivore/imisra/datasets/sunrgbd/label_files/train_disparity_names.npy # AWS
            - /checkpoint/imisra/datasets/sunrgbd/label_files/train_disparity_names.npy
            - manifold://omnivore/tree/datasets/sunrgbd/scene_challenge/train_disparity_names.npy
          new_prefix: ${constants.sun_rgb_prefix}
          new_depth_prefix: ${constants.sun_depth_prefix}
          transforms:
            - _target_: omnivore.data.transforms.image_rgbd_sample.VisionDepthConcatChannelTransform
              base_transform:
                _target_: torchvision.transforms.Compose
                transforms:
                  - _target_: omnivore.data.transforms.image_rgbd.DepthNorm
                    max_depth: NULL
                    compute_max_per_sample: True
                  - _target_: torchvision.transforms.RandomResizedCrop
                    size: 224
                    interpolation: 2
                  - _target_: torchvision.transforms.RandomHorizontalFlip
                  - _target_: omnivore.data.transforms.image_rgbd.RandAugment3d  # Essentially autoagument rand-m9-mstd0.5-inc1
                    num_ops: 2
                    magnitude: 9
                    interpolation: 2
                  - _target_: omnivore.data.transforms.image_rgbd.ColorJitter3d
                    brightness: 0.4
                    contrast: 0.4
                    saturation: 0.4
                    hue: 0.4
                  - _target_: torchvision.transforms.RandomErasing
                    p: .25
                  - _target_: torchvision.transforms.Normalize
                    mean: [0.485, 0.456, 0.406, 0.480]
                    std: [0.229, 0.224, 0.225, 0.165]
        shuffle: True
        batch_size: 32
        num_workers: 12
        pin_memory: False
        drop_last: True
        collate_fn:
          _target_: omnivore.data.api.DefaultOmnivoreCollator
          output_key: sunrgbd
          batch_kwargs:
            model_fwd_kwargs:
              use_checkpoint: True         
          batch_transforms:
          - _target_: omnivore.data.transforms.image_rgbd_sample.VisionDepthConcatChannelToVisionDepthBatch
        worker_init_fn: NULL
      - _target_: omnivore.data.torch_dataset.TorchDataset
        dataset:
          _target_: omnivore.data.path_dataset.VideoPathDataset
          decode_audio: True
          audio_num_mel_bins: ${constants.audio_num_mel_bins}
          audio_target_len: ${constants.audio_target_len}
          label_type: csv
          decoder_kwargs:
            sample_rate: 16000
          copy_on_read: False
          remove_prefix: unbalanced_train_segments/video/
          new_prefix: /fsx-omnivore/rgirdhar/data/audioset/unbalanced_train_segments/video_mp4-288p/
          path_file_list:
            - /checkpoint/rgirdhar/Work/FB/2021/003_JointImVid/Datasets/AudioSetVideo/unbalanced_train_segments_filelist.npy
          label_file_list:
            - /checkpoint/rgirdhar/Work/FB/2021/003_JointImVid/Datasets/AudioSetVideo/unbalanced_train_segments_labels.npy
          clip_sampler:
            _target_: pytorchvideo.data.clip_sampling.RandomClipSampler
            clip_duration: ${constants.video_clip_duration}
          frame_sampler:
            _target_: pytorchvideo.transforms.UniformTemporalSubsample
            num_samples: ${constants.video_num_frames}
          decoder: decord  # since this allows for audio decoding
          normalize_to_0_1: True
          transforms:
            - _target_: omnivore.data.transforms.transform_wrappers.VisionTransform
              base_transform:
                _target_: omnivore.data.transforms.transform_wrappers.ListTransform
                base_transform:
                  _target_: torchvision.transforms.Compose
                  transforms:
                  - _target_: pytorchvideo.transforms.ShortSideScale
                    size: 224  # 256
                  - _target_: torchvision.transforms.RandomResizedCrop
                    size: 224
                  - _target_: torchvision.transforms.RandomHorizontalFlip
                    p: 0.5
                  - _target_: torchvision.transforms._transforms_video.NormalizeVideo
                    mean: [0.485, 0.456, 0.406]
                    std: [0.229, 0.224, 0.225]
            - _target_: omnivore.data.transforms.transform_wrappers.SingleFieldTransform
              field: audio
              base_transform:
                _target_: omnivore.data.transforms.transform_wrappers.ListTransform
                base_transform:
                  _target_: torchvision.transforms.Compose
                  transforms:
                    - _target_: torchaudio.transforms.FrequencyMasking
                      freq_mask_param: ${constants.freq_mask_param}
                    - _target_: torchaudio.transforms.TimeMasking
                      time_mask_param: 0
                    - _target_: torchvision.transforms.Normalize
                      # From table 3 https://arxiv.org/pdf/2207.06405.pdf or https://github.com/YuanGongND/ast/blob/d7d8b4b8e06cdaeb6c843cdb38794c1c7692234c/src/run.py#L62
                      mean: -4.268
                      std: ${times:4.569,2}
        shuffle: True
        batch_size: 120  # 128 was on cusp of OOM sometimes
        num_workers: 12
        pin_memory: True
        drop_last: True
        collate_fn:
          _target_: omnivore.data.api.DefaultOmnivoreCollator
          output_key: audioset
          convert_label_to_one_hot_num_classes: 527
          batch_kwargs:
            model_fwd_kwargs:
              use_checkpoint: True
        worker_init_fn: NULL

    # Audioset video
      - _target_: omnivore.data.torch_dataset.TorchDataset
        dataset:
          _target_: omnivore.data.path_dataset.VideoPathDataset
          decode_audio: False
          label_type: csv
          remove_prefix: eval_segments/video/
          new_prefix: /fsx-omnivore/rgirdhar/data/audioset/eval_segments/video_mp4-288p/
          path_file_list:
            - /checkpoint/rgirdhar/Work/FB/2021/003_JointImVid/Datasets/AudioSetVideo/eval_segments_filelist.npy
          label_file_list:
            - /checkpoint/rgirdhar/Work/FB/2021/003_JointImVid/Datasets/AudioSetVideo/eval_segments_labels.npy
          clip_sampler:
            _target_: pytorchvideo.data.clip_sampling.ConstantClipsPerVideoSampler
            clip_duration: ${constants.video_clip_duration}
            clips_per_video: ${ceil_int:${divide:10,${constants.video_clip_duration}}}
          frame_sampler:
            _target_: pytorchvideo.transforms.UniformTemporalSubsample
            num_samples: ${constants.video_num_frames}
          decoder: decord  # since this allows for audio decoding
          normalize_to_0_1: True
          transforms:
            - _target_: omnivore.data.transforms.transform_wrappers.VisionTransform
              base_transform:
                _target_: omnivore.data.transforms.transform_wrappers.ListTransform
                base_transform:
                  _target_: torchvision.transforms.Compose
                  transforms:
                  - _target_: pytorchvideo.transforms.ShortSideScale
                    size: 224  # 256
                  - _target_: torchvision.transforms.CenterCrop
                    size: 224
                  - _target_: torchvision.transforms._transforms_video.NormalizeVideo
                    mean: [0.485, 0.456, 0.406]
                    std: [0.229, 0.224, 0.225]
        shuffle: False
        batch_size: 120  # 128 was on cusp of OOM sometimes
        num_workers: 10
        pin_memory: True
        drop_last: True
        collate_fn:
          _target_: omnivore.data.api.DefaultOmnivoreCollator
          output_key: audioset_video
          convert_label_to_one_hot_num_classes: 527
          batch_kwargs:
            model_fwd_kwargs:
              use_checkpoint: True
        worker_init_fn: NULL                    

    # ESC
      - _target_: omnivore.data.torch_dataset.TorchDataset
        dataset:
          _target_: omnivore.data.path_dataset.AudioPathDataset
          num_mel_bins: ${constants.audio_num_mel_bins}
          target_length: ${constants.audio_target_len}  # Can't do 512, as position encoding needs to be handled
          new_prefix: /fsx-omnivore/rgirdhar/data/ESC/
          path_file_list:
            - /checkpoint/rgirdhar/Work/FB/2021/003_JointImVid/Datasets/ESC-50/fold1_eval_filelist.npy
          label_file_list:
            - /checkpoint/rgirdhar/Work/FB/2021/003_JointImVid/Datasets/ESC-50/fold1_eval_labels.npy
          clip_sampler:
            _target_: pytorchvideo.data.clip_sampling.ConstantClipsPerVideoSampler
            clip_duration: ${constants.video_clip_duration}
            clips_per_video: ${ceil_int:${divide:5,${constants.video_clip_duration}}}
          transforms:
            - _target_: omnivore.data.transforms.transform_wrappers.SingleFieldTransform
              field: audio
              base_transform:
                _target_: omnivore.data.transforms.transform_wrappers.ListTransform
                base_transform:
                  _target_: torchvision.transforms.Compose
                  transforms:
                    - _target_: torchvision.transforms.Normalize
                      # From table 3 https://arxiv.org/pdf/2207.06405.pdf or https://github.com/YuanGongND/ast/blob/d7d8b4b8e06cdaeb6c843cdb38794c1c7692234c/src/run.py#L62
                      mean: -6.6268077
                      std: ${times:5.358466,2}
        shuffle: False
        batch_size: 2
        num_workers: 8
        pin_memory: True
        drop_last: False
        collate_fn:
          _target_: omnivore.data.api.DefaultOmnivoreCollator
          output_key: esc_fold1
        worker_init_fn: NULL

      # VGG-sound
      - _target_: omnivore.data.torch_dataset.TorchDataset
        dataset:
          _target_: omnivore.data.path_dataset.AudioPathDataset
          num_mel_bins: ${constants.audio_num_mel_bins}
          target_length: ${constants.audio_target_len}  # Can't do 512, as position encoding needs to be handled
          new_prefix: /fsx-omnivore/rgirdhar/data/VGGSound/wav_24k/
          path_file_list:
            - /checkpoint/rgirdhar/Work/FB/2021/003_JointImVid/Datasets/VGGSound/eval_filelist.npy
          label_file_list:
            - /checkpoint/rgirdhar/Work/FB/2021/003_JointImVid/Datasets/VGGSound/eval_labels.npy
          clip_sampler:
            _target_: pytorchvideo.data.clip_sampling.ConstantClipsPerVideoSampler
            clip_duration: ${constants.video_clip_duration}
            clips_per_video: ${ceil_int:${divide:10,${constants.video_clip_duration}}}
          transforms:
            - _target_: omnivore.data.transforms.transform_wrappers.SingleFieldTransform
              field: audio
              base_transform:
                _target_: omnivore.data.transforms.transform_wrappers.ListTransform
                base_transform:
                  _target_: torchvision.transforms.Compose
                  transforms:
                    - _target_: torchvision.transforms.Normalize
                      # Using the same as audioset since both youtube datasets.. might not be ideal though!
                      # TODO recompute this
                      mean: -4.268
                      std: ${times:4.569,2}
        shuffle: False
        batch_size: 16
        num_workers: 8
        pin_memory: True
        drop_last: False
        collate_fn:
          _target_: omnivore.data.api.DefaultOmnivoreCollator
          output_key: vggsound
        worker_init_fn: NULL

  model:
    _target_: omnivore.models.multimodal_wrapper.MultiModalZeroShotWithTextTargetsWrapper
    multimodal_model:
      _target_: omnivore.models.multimodal_wrapper.MultimodalWrapper
      list_input_reduction: mean
      modality_preprocessors:
        - name: "rgbt_preprocessor"
          preprocessor:
            _target_: omnivore.models.multimodal_preprocessors.RGBDTPreprocessor
            img_size:
            - 3
            - ${constants.video_num_frames}
            - 224
            - 224
            num_cls_tokens: 1
            pos_embed_fn:
              _target_: omnivore.models.multimodal_preprocessors.SpatioTemporalPosEmbeddingHelper
              _partial_: true
              learnable: ${constants.vision_pos_embed_learnable}
            depth_stem: NULL
            rgbt_stem:
              _target_: omnivore.models.multimodal_preprocessors.PatchEmbedGeneric
              proj_stem:
              - _target_: omnivore.models.PadIm2Video
                pad_type: repeat
                ntimes: 2
              - _target_: torch.nn.Conv3d
                in_channels: 3
                kernel_size: ${constants.rgb_kernel_size}
                out_channels: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
                stride: ${.kernel_size}
                bias: False
              norm_layer:
                _target_: torch.nn.LayerNorm # called self.ln_pre in VisualTransformer OpenCLIP
                normalized_shape: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
        - name: "d_preprocessor"
          preprocessor:
            _target_: omnivore.models.multimodal_preprocessors.RGBDTPreprocessor
            img_size:
            - 1
            - 224
            - 224
            num_cls_tokens: 1
            pos_embed_fn:
              _target_: omnivore.models.multimodal_preprocessors.SpatioTemporalPosEmbeddingHelper
              _partial_: true
              learnable: ${constants.depth_pos_embed_learnable}
            rgbt_stem: NULL
            depth_stem:
              _target_: omnivore.models.multimodal_preprocessors.PatchEmbedGeneric
              proj_stem:
              - _target_: torch.nn.Conv2d
                kernel_size: ${constants.kernel_size}
                in_channels: 1
                out_channels: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
                stride: ${.kernel_size}
                bias: False
              norm_layer:
                _target_: torch.nn.LayerNorm # called self.ln_pre in VisualTransformer OpenCLIP
                normalized_shape: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
        - name: audio_preprocessor
          preprocessor:
            _target_: omnivore.models.multimodal_preprocessors.AudioPreprocessor
            img_size:
            - 1
            - ${constants.audio_num_mel_bins}
            - ${constants.audio_target_len}
            num_cls_tokens: 1
            pos_embed_fn:
              _target_: omnivore.models.multimodal_preprocessors.SpatioTemporalPosEmbeddingHelper
              _partial_: true
              learnable: ${constants.learnable_pos_audio}
            audio_stem:
              _target_: omnivore.models.multimodal_preprocessors.PatchEmbedGeneric
              proj_stem:
                - _target_: torch.nn.Conv2d
                  in_channels: 1
                  kernel_size: 16
                  out_channels: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
                  stride: ${.kernel_size}
                  bias: False
              norm_layer:
                _target_: torch.nn.LayerNorm # called self.ln_pre in VisualTransformer OpenCLIP
                normalized_shape: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
        - name: "text_preprocessor"
          preprocessor:
            _target_: omnivore.models.multimodal_preprocessors.TextPreprocessor
            context_length: 77
            vocab_size: 49408
            embed_dim: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
            causal_masking: False
      sample_to_modality_preprocessor:
        - sample_type: ${get_class:omnivore.data.api.BatchVisionTextSample}
          sample_field_to_modality:
          - input_fields: ["vision"]
            preprocessor_name: rgbt_preprocessor
            output_key: "vision_tokens"
            output_key_for_dict: False
          - input_fields: ["text"]
            preprocessor_name: text_preprocessor
            output_key: "text_tokens"
            output_key_for_dict: False
        - sample_type: ${get_class:omnivore.data.api.BatchTextSample}
          sample_field_to_modality:
          - input_fields: ["text"]
            preprocessor_name: text_preprocessor
            output_key: "text_tokens"
            output_key_for_dict: False
        - sample_type: ${get_class:omnivore.data.api.BatchVisionSample}
          sample_field_to_modality:
          - input_fields: ["vision"]
            preprocessor_name: rgbt_preprocessor
            output_key: "vision_tokens"
            output_key_for_dict: False
        - sample_type: ${get_class:omnivore.data.api.BatchVisionAudioSample}
          sample_field_to_modality:
          - input_fields: ["vision"]
            preprocessor_name: rgbt_preprocessor
            output_key: "vision_tokens"
            output_key_for_dict: False
          - input_fields: ["audio"]
            preprocessor_name: audio_preprocessor
            output_key: "audio_tokens"
            output_key_for_dict: False
        - sample_type: ${get_class:omnivore.data.api.BatchAudioSample}
          sample_field_to_modality:
          - input_fields: ["audio"]
            preprocessor_name: audio_preprocessor
            output_key: "audio_tokens"
            output_key_for_dict: False
        - sample_type: ${get_class:omnivore.data.api.BatchVisionDepthSample}
          sample_field_to_modality:
          - input_fields: ["vision"]
            preprocessor_name: rgbt_preprocessor
            output_key: "vision_tokens"
            output_key_for_dict: False
          - input_fields: ["depth"]
            preprocessor_name: d_preprocessor
            output_key: "depth_tokens_vision_targets"
            output_key_for_dict: False
        - sample_type: ${get_class:omnivore.data.api.BatchDepthSample}
          sample_field_to_modality:
          - input_fields: ["depth"]
            preprocessor_name: d_preprocessor
            output_key: "depth_tokens_vision_targets"
            output_key_for_dict: False
        - sample_type: ${get_class:omnivore.data.api.BatchAudioTextSample}
          sample_field_to_modality:
          - input_fields: ["audio"]
            preprocessor_name: audio_preprocessor
            output_key: "audio_tokens"
            output_key_for_dict: False
          - input_fields: ["text"]
            preprocessor_name: text_preprocessor
            output_key: "text_tokens"
            output_key_for_dict: False
      trunks:
        - name: vision
          trunk:
            _target_: omnivore.models.simple_transformer.SimpleTransformer
            # block: 
              # _target_: omnivore.models.layers.BlockWithEfficientDropPath
              # _partial_: true
            embed_dim: 1024
            num_blocks: 24
            ffn_dropout_rate: 0.0
            drop_path_rate: 0.0
            layer_scale_type: per_channel
            layer_scale_init_value: 1e-4
            attn_target:
              _target_: omnivore.models.simple_transformer.MultiheadAttention
              embed_dim: ${..embed_dim}
              num_heads: 16
              dropout: 0.0
              bias: True
              add_bias_kv: True
              _partial_: True
            pre_transformer_layer:
              _target_: omnivore.models.helpers.EinOpsRearrange
              rearrange_expr: "b l d -> l b d"
            post_transformer_layer:
              _target_: omnivore.models.helpers.EinOpsRearrange
              rearrange_expr: "l b d -> b l d"
      tokens_to_trunks:
        - trunk_name: vision
          input_keys:
            - vision_tokens
            - text_tokens
            - depth_tokens_vision_targets
            - audio_tokens
      heads:
        - head:
            _target_: torch.nn.Sequential
            _args_:
            - _target_: torch.nn.LayerNorm # called self.ln_post in VisualTransformer OpenCLIP
              normalized_shape: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
            - _target_: omnivore.models.pooling_helpers.SelectElement
              index: 0 # select CLS token
            - _target_: omnivision.model.model_init_utils.init_parameters
              model:
                _target_: torch.nn.Linear
                in_features: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
                out_features: ${constants.head_final_embed_dim}
                bias: False # OpenCLIP
              init_fns:
                weight:
                  _target_: torch.nn.init.normal_
                  _partial_: True
                  mean: 0
                  std: 0.03608 # 768 ** -0.5
          fork_module: ""
          preprocessed_input_key: "vision_tokens"
          output_key: "vision_embed"
        - head:
            _target_: torch.nn.Sequential
            _args_:
            - _target_: torch.nn.LayerNorm # called self.ln_post in VisualTransformer OpenCLIP
              normalized_shape: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
            - _target_: omnivore.models.pooling_helpers.SelectElement
              index: 0 # select CLS token
            - _target_: omnivision.model.model_init_utils.init_parameters
              model:
                _target_: torch.nn.Linear
                in_features: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
                out_features: ${constants.head_final_embed_dim}
                bias: False # OpenCLIP
              init_fns:
                weight:
                  _target_: torch.nn.init.normal_
                  _partial_: True
                  mean: 0
                  std: 0.03608 # 768 ** -0.5
          fork_module: ""
          preprocessed_input_key: "depth_tokens_vision_targets"
          output_key: "depth_embed_vision_targets"
        - head:
            _target_: omnivore.models.pooling_helpers.SelectEOSAndProject
            proj:
              _target_: torch.nn.Sequential
              _args_:
              - _target_: torch.nn.LayerNorm # called self.ln_final in CLIP OpenCLIP
                normalized_shape: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
              - _target_: omnivision.model.model_init_utils.init_parameters
                model:
                  _target_: torch.nn.Linear
                  in_features: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
                  out_features: ${constants.head_final_embed_dim}
                  bias: False # OpenCLIP
                init_fns:
                  weight:
                    _target_: torch.nn.init.normal_
                    _partial_: True
                    mean: 0
                    std: 0.03608 # 768 ** -0.5
          fork_module: ""
          preprocessed_input_key: "text_tokens"
          output_key: "text_embed"
        - head:
            _target_: torch.nn.Sequential
            _args_:
            - _target_: torch.nn.LayerNorm # called self.ln_post in VisualTransformer OpenCLIP
              normalized_shape: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
            - _target_: omnivore.models.pooling_helpers.SelectElement
              index: 0 # select CLS token
            - _target_: omnivision.model.model_init_utils.init_parameters
              model:
                _target_: torch.nn.Linear
                in_features: ${trainer.model.multimodal_model.trunks.0.trunk.embed_dim}
                out_features: ${.in_features}
                bias: False # OpenCLIP
              init_fns:
                weight:
                  _target_: torch.nn.init.normal_
                  _partial_: True
                  mean: 0
                  std: 0.03608 # 768 ** -0.5
            - _target_: torch.nn.ReLU
            - _target_: omnivision.model.model_init_utils.init_parameters
              model:
                _target_: torch.nn.Linear
                in_features: ${...2.model.out_features}
                out_features: ${constants.head_final_embed_dim}
                bias: False # OpenCLIP
              init_fns:
                weight:
                  _target_: torch.nn.init.normal_
                  _partial_: True
                  mean: 0
                  std: 0.03608 # 768 ** -0.5
          fork_module: ""
          preprocessed_input_key: "audio_tokens"
          output_key: "audio_embed"
      postprocessors:
        - name: "normalize"
          postprocessor:
            _target_: omnivore.models.helpers.Normalize
            dim: -1
        - name: "normalize_and_scale_text"
          postprocessor:
            _target_: torch.nn.Sequential
            _args_:
              - _target_: omnivore.models.helpers.Normalize
                dim: -1
              - _target_: omnivore.models.helpers.LearnableLogitScaling
        - name: "normalize_and_scale_depth"
          postprocessor:
            _target_: torch.nn.Sequential
            _args_:
              - _target_: omnivore.models.helpers.Normalize
                dim: -1
              - _target_: omnivore.models.helpers.LearnableLogitScaling
                logit_scale_init: 5 # 1/0.2
                learnable: False
        - name: "normalize_and_scale_audio"
          postprocessor:
            _target_: torch.nn.Sequential
            _args_:
              - _target_: omnivore.models.helpers.Normalize
                dim: -1
              - _target_: omnivore.models.helpers.LearnableLogitScaling
                logit_scale_init: 14.28 # 1/0.07 
                learnable: False
      head_to_postprocessor:
        - input_key: "vision_embed"
          postprocessor_name: "normalize"
        - input_key: "text_embed"
          postprocessor_name: "normalize_and_scale_text" # only apply logit scaling to 1 dim
        - input_key: "depth_embed_vision_targets"
          postprocessor_name: "normalize_and_scale_depth" # only apply logit scaling to 1 dim
        - input_key: "audio_embed"
          postprocessor_name: "normalize_and_scale_audio"
  optim:
    optimizer:
      _target_: torch.optim.AdamW
      betas:
        - 0.9
        - 0.98
      eps: 1e-6
    gradient_clip:
      _target_: omnivore.optim.helpers.GradientClipper
      max_norm: 5.0
      norm_type: 2
    # gradient_logger:
    #   _target_: omnivore.optim.monitoring.GradientNormWatcher
    #   output_path: ${launcher.experiment_log_dir}/gradients.json
    #   accum_steps: 10
    #   detailed: True
    amp:
      enabled: True
      amp_dtype: bfloat16 # bfloat16 or float16
    options:
      lr:
        - scheduler:
            _target_: fvcore.common.param_scheduler.CompositeParamScheduler
            schedulers:
              - _target_: fvcore.common.param_scheduler.LinearParamScheduler
                start_value: 1e-6
                end_value: 1e-3
              - _target_: fvcore.common.param_scheduler.CosineParamScheduler
                start_value: ${..0.end_value}
                end_value: 1e-5
            lengths:
              - ${divide:${constants.warmup_epochs},${trainer.max_epochs}}
              - ${subtract:1,${divide:${constants.warmup_epochs},${trainer.max_epochs}}}
            interval_scaling: ['rescaled', 'rescaled']
      weight_decay:
        - scheduler:
            _target_: fvcore.common.param_scheduler.ConstantParamScheduler
            value: 0.05
        - scheduler:
            _target_: fvcore.common.param_scheduler.ConstantParamScheduler
            value: 0.0
          param_names:
            - '*.bias'
            - '*pos_embed'
            - '*cls_token'
            - "*log_logit_scale"
          module_cls_names: ["torch.nn.LayerNorm"]

  loss:
    laion:
      _target_: omnivore.losses.contrastive_loss.ContrastiveLoss
      feat1_name: vision_embed
      feat2_name: text_embed
      logit_scale_name: NULL
      normalize: False # SimpleTx normalizes outputs in the model
      mask_with_data_valid: ${constants.mask_with_data_valid}
      all_gather_fn: 
        _target_: omnivore.utils.distributed.all_gather_batch_with_grad
        _partial_: True
    sunrgbd:
      _target_: omnivore.losses.scaled_loss.ScaledLoss
      scale: 1.0
      loss_fn:
        _target_: omnivore.losses.contrastive_loss.ContrastiveLoss
        feat1_name: vision_embed
        feat2_name: depth_embed_vision_targets
        feat1_no_grad: True
        logit_scale_name: NULL
        normalize: False # SimpleTx normalizes outputs in the model
        mask_with_data_valid: ${constants.mask_with_data_valid}
        all_gather_fn: 
          _target_: omnivore.utils.distributed.all_gather_batch_with_grad
          _partial_: True
    audioset:
      _target_: omnivore.losses.scaled_loss.ScaledLoss
      scale: ${constants.audio_loss_wt}
      loss_fn:
        _target_: omnivore.losses.contrastive_loss.ContrastiveLoss
        feat1_name: vision_embed
        feat2_name: audio_embed
        feat1_no_grad: True
        logit_scale_name: NULL
        normalize: False # OpenClip normalizes outputs in the model
        mask_with_data_valid: ${constants.mask_with_data_valid}
        all_gather_fn: 
          _target_: omnivore.utils.distributed.all_gather_batch_with_grad
          _partial_: True

  distributed:
    backend: nccl
    comms_dtype: bfloat16
    find_unused_parameters: True

  logging:
    tensorboard_writer:
      _target_: omnivore.logger.make_tensorboard_logger
      log_dir:  ${launcher.experiment_log_dir}/tensorboard
      flush_secs: 120
    log_dir: ${launcher.experiment_log_dir}/logs
    log_freq: 10

  checkpoint:
    save_dir: ${launcher.experiment_log_dir}/checkpoints
    save_freq: 1 # 0 only last checkpoint is saved.
    model_weight_initializer: NULL

  cuda:
    # https://pytorch.org/docs/stable/backends.html
    allow_tf32: True
    cudnn_deterministic: False
    cudnn_benchmark: True

launcher:
  num_nodes: 8
  gpus_per_node: 8

hydra:
  output_subdir: NULL
  run:
    dir: .

submitit:
  name: clip_base
  partition: learnlab
  timeout_hour: 72
  use_cluster: True
  cpus_per_task: 12
  port_range: [10000, 65000]

